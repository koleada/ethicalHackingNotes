General Cache Deception Methodology: 

1. Compile a list of URLs that contain sensitive information. these will generally be requests that support GET, HEAD or OPTIONS and must contain sensative content to be impactful.  

2. Feed these tools into the web cache deception scanner to get a baseline heat map. This will check to see if adding certain file extensions, delimiters, or weird characters will lead to the same response being served up. So we can see generally speaking what exts and characters/ delims work and if the endpoint is even remotely vulnerable to deception. Syntax:

"go run web-cache-vulnerability-scanner.go -u https://example.com/path"

3. Send that request to the repeater (or zap) and begin manual testing. We will need to ensure this page is cached and demonstrate the vulnerability. Do this by using response headers and examining the time to load the request. 

** even if the tool returns nothing, we should still manually test with other file extensions or potentially just modify the wordlist used in the scanner. 

We will then need a second user account to demonstrate we can retrieve the sensative information. 

4. As an authenticated user, browse to the sensative endpoint that contains the cache deception payload (either browser or repeater). Get the page cached. Immediately request the url to the sensative endpoint that contains the deception payload in a private browser window. We should see the users cached, sensative information. 

** we can use the web-cache-deceptor-exploit.sh script in tools/ dir to help with detecting and exploiting as well. usage: 
./deceptor.sh -u https://vulnweb.io/myaccout
